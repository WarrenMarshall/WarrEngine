------------------------------------------------------------------
BLANK LINES
------------------------------------------------------------------

Are ignored.

------------------------------------------------------------------
ASSET DEFINITIONS
------------------------------------------------------------------

A series of key/value pairs that are enclosed in a curly bracket
scope. Each new scope is a new asset definition.

{
	"key1" "value"
	"key2" "value"
	.
	.
	"keyN" "value"
}

------------------------------------------------------------------
COMMENTS
------------------------------------------------------------------

# lines that start with a semi-color are comments
"lines_can_also_end" "with_comments" # like this

this allows you to use a text editor with  Python syntax
highlighting for better readability

------------------------------------------------------------------
MULTI_LINE
------------------------------------------------------------------

Lines can span multiple lines if they end with a backslash

	"frames" "\
		germ_red_idle_0, germ_red_idle_1, germ_red_idle_2,\
		germ_red_idle_3, germ_red_idle_4, germ_red_idle_5,\
		germ_red_idle_6, germ_red_idle_7"

------------------------------------------------------------------
COLORS
------------------------------------------------------------------

Anywhere colors are specified, you can either use a predefined name or an RGB value split up with forward slashes

"e_color_white"
..or..
1.0/1.0/1.0
1.0/1.0/1.0/1.0

Alpha is optional. The parsing works if it's there or not (defaults to 1.0).

------------------------------------------------------------------
PREFIXES FOR EMITTER FIELDS
------------------------------------------------------------------

; v_ = vector
; r_ = range
; t_ = timeline
; b_ = boolean/flag
; s_ = scalar
; a_ = angle

------------------------------------------------------------------
EMITTER FIELDS
------------------------------------------------------------------

"b_needs_warm_up" "true/FALSE"
	- true, the particle system wants to be run through some update cycles before being drawn for the first time. this allows things like torches to look like they've been on before the player got there.

"a_dir" "inherit_from_parent"
	- special arg for the direction field that indicates the angle of the particles spawned is copied from the rotation of the parent entity. this is for things that emit from an object and want to move in the same direction that the entity is facing (muzzle flashes, magic spells, etc)

"b_one_shot" "true/FALSE"
	- emitters spawns all of it's particles at once and then immediately marks itself as dying. good for explosions and "bursty" type effects.

"spawner_type" "POINT/circle/box"
	- "point"
		- particles spawn at emitter position
	- "circle,radius"
		- particles spawn randomly within a circle at emitter position
	- "box,width,height"
		- particles spawn randomly within a box centered at emitter position

------------------------------------------------------------------
SLICE DEFs
------------------------------------------------------------------

"rect" "x, y, w, h"
	- the complete position and size of the area we wish to slice def

"x_slices" "left, right"
	- the widths of the left and right slices. these are both positive
	  numbers measured from the left and right edges of the "rect" above.

"y_slices" "top, bottom"
	- the widths of the topt and bottom slices. these are both positive
	  numbers measured from the top and bottom edges of the "rect" above.

Example:

	{
		"type" "slice_def"
		"name" "ui_default_panel"
		"texture" "tex_ui_default"

		"rect" "190, 98, 100, 100"
		"x_slices" "7, 7"
		"y_slices" "7, 7"
	}
